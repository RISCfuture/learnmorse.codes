@use 'sass:map';
@use 'sass:color';

/* the basics */

$light: #fff;
$medium: #a6a6a6;
$dark: #000;
$color: #00f;
$pass: #0d0;
$fail: #f00;

/* Defines color themes for light and dark schemes. Use this mixin to get the
   proper color to use given the user's desired color scheme. This mixin yields
   to your content block a map of named colors to use. */

@mixin theme {
  @content ((
    "background": $light,
    "border-color": color.adjust($light, $lightness: -10%),
    "button-background-color": color.adjust($light, $lightness: -10%),
    "button-background-hover-color": color.adjust($light, $lightness: -20%),
    "fail": color.adjust($fail, $lightness: 20%),
    "link-color": $color,
    "muted-color": color.adjust($medium, $lightness: -20%),
    "pass": color.adjust($pass, $lightness: 20%),
    "text-color": $dark
  ));

  @media all and (prefers-color-scheme: dark) {
    @content ((
      "background": $dark,
      "border-color": color.adjust($dark, $lightness: 10%),
      "button-background-color": color.adjust($dark, $lightness: 10%),
      "button-background-hover-color": color.adjust($dark, $lightness: 20%),
      "fail": $fail,
      "link-color": color.adjust($color, $lightness: 20%),
      "muted-color": $medium,
      "pass": $pass,
      "text-color": $light
    ));
  }
}

/* Convenience method for getting named colors from the map given to you by
   the `theme` mixin; just so you don't have to also use `sass:map` in all your
   CSS files. */

@function get($theme, $name) {
  @return map.get($theme, $name);
}

@mixin muted {
  @include theme using($theme) {
    color: get($theme, 'muted-color');
  }
}
